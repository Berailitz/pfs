syntax = "proto3";

package remotetree;

service RemoteTree {
    //rpc RLock(UInt64ID) returns (StatusReply) {}
    //rpc WLock(UInt64ID) returns (StatusReply) {}
    //rpc RUnlock(UInt64ID) returns (StatusReply) {}
    //rpc WUnlock(UInt64ID) returns (StatusReply) {}

    rpc FetchNode(NodeIsReadRequest) returns (Node) {}
    rpc UnlockNode(NodeIsReadRequest) returns (Error) {}

    rpc LookUpInode(LookUpInodeRequest) returns (LookUpInodeReply) {}
    rpc GetInodeAttributes(UInt64ID) returns (GetInodeAttributesReply) {}
    rpc SetInodeAttributes(SetInodeAttributesRequest) returns (SetInodeAttributesReply) {}
    rpc MkDir(MkDirRequest) returns (MkDirReply) {}
    rpc CreateNode(CreateNodeRequest) returns (CreateNodeReply) {}
    rpc CreateFile(CreateFileRequest) returns (CreateFileReply) {}
    rpc CreateSymlink(CreateSymlinkRequest) returns (CreateSymlinkReply) {}
    rpc CreateLink(CreateLinkRequest) returns (CreateLinkReply) {}
    rpc Rename(RenameRequest) returns (Error) {}
    rpc RmDir(RmDirRequest) returns (Error) {}
    rpc Unlink(UnlinkRequest) returns (Error) {}
    rpc OpenDir(OpenXRequest) returns (Uint64Reply) {}
    rpc ReadDir(ReadXRequest) returns (ReadXReply) {}
    rpc ReleaseHandle(UInt64ID) returns (Error) {}
    rpc OpenFile(OpenXRequest) returns (Uint64Reply) {}
    rpc ReadFile(ReadXRequest) returns (ReadXReply) {}
    rpc WriteFile(WriteXRequest) returns (Uint64Reply) {}
    rpc ReadSymlink(UInt64ID) returns (ReadSymlinkReply) {}
    rpc GetXattr(GetXattrRequest) returns (ReadXReply) {}
    rpc ListXattr(ListXattrRequest) returns (ReadXReply) {}
    rpc RemoveXattr(RemoveXattrRequest) returns (Error) {}
    rpc SetXattr(SetXattrRequest) returns (Error) {}
    rpc Fallocate(FallocateRequest) returns (Error) {}

    rpc QueryOwner(UInt64ID) returns (Addr) {}
    rpc QueryAddr(UInt64ID) returns (Addr) {}
    rpc Allocate(OwnerId) returns (UInt64ID) {}
    rpc Deallocate(UInt64ID) returns (IsOK) {}
    rpc RegisterOwner(Addr) returns (OwnerId) {}
    rpc RemoveOwner(OwnerId) returns (IsOK) {}
    rpc AllocateRoot(OwnerId) returns (IsOK) {}
}

message NodeIsReadRequest {
    uint64 id = 1;
    bool isRead = 2;
}

message Node {
    uint64 NID = 1;
    InodeAttributes NAttr = 2;
    string NTarget = 3;
    map<string, bytes> NXattrs = 4;
    repeated Dirent NEntries = 5;
    bytes NContents = 6;
}

message LookUpInodeRequest {
    uint64 parentID = 1;
    string name = 2;
}

message LookUpInodeReply {
    Error err = 1;
    uint64 id = 2;
    InodeAttributes attr = 3;
}

message GetInodeAttributesReply {
    Error err = 1;
    InodeAttributes attr = 3;
}

message SetInodeAttributesRequest {
    uint64 id = 1;
    bool hasSize = 2;
    uint64 size = 3;
    bool hasMode = 4;
    uint32 mode = 5;
    bool hasMtime = 6;
    int64 mtime = 7;
}

message SetInodeAttributesReply {
    Error err = 1;
    InodeAttributes attr = 2;
}

message MkDirRequest {
    uint64 id = 1;
    string name = 2;
    uint32 mode = 3;
}

message MkDirReply {
    Error err = 1;
    uint64 id = 2;
    InodeAttributes attr = 3;
}

message CreateNodeRequest {
    uint64 id = 1;
    string name = 2;
    uint32 mode = 3;
}

message CreateNodeReply {
    Error err = 1;
    ChildInodeEntry entry = 2;
}

message CreateFileRequest {
    uint64 id = 1;
    string name = 2;
    uint32 mode = 3;
    uint32 flags = 4;
}

message CreateFileReply {
    Error err = 1;
    ChildInodeEntry entry = 2;
    uint64 handle = 3;
}

message CreateSymlinkRequest {
    uint64 id = 1;
    string name = 2;
    string target = 3;
}

message CreateLinkRequest {
    uint64 id = 1;
    string name = 2;
    uint64 targetID = 3;
}

message CreateSymlinkReply {
    Error err = 1;
    uint64 id = 2;
    InodeAttributes attr = 3;
}

message CreateLinkReply {
    Error err = 1;
    InodeAttributes attr = 2;
}

message RenameRequest {
    uint64 oldParent = 1;
    string oldName = 2;
    uint64 newParent = 3;
    string newName = 4;
}

message RmDirRequest {
    uint64 parent = 1;
    string name = 2;
}

message UnlinkRequest {
    uint64 parent = 1;
    string name = 2;
}

message OpenXRequest {
    uint64 id = 1;
    uint32 flags = 2;
}

message RemoveXattrRequest {
    uint64 id = 1;
    string name = 2;
}

message ReadXRequest {
    uint64 id = 1;
    uint64 length = 2;
    uint64 offset = 3;
}

message ReadXReply {
    Error err = 1;
    uint64 bytesRead = 2;
    bytes buf = 3;
}

message WriteXRequest {
    uint64 id = 1;
    uint64 offset = 2;
    bytes data = 3;
}

message Uint64Reply {
    Error err = 1;
    uint64 num = 2;
}

message ReadSymlinkReply {
    Error err = 1;
    string target = 2;
}

message GetXattrRequest {
    uint64 id = 1;
    string name = 2;
    uint64 length = 3;
}

message ListXattrRequest {
    uint64 id = 1;
    uint64 length = 2;
}

message SetXattrRequest {
    uint64 id = 1;
    string name = 2;
    bytes value = 3;
    uint32 flag = 4;
}

message FallocateRequest {
    uint64 id = 1;
    uint32 mode = 2;
    uint64 length = 3;
}

message ChildInodeEntry {
    uint64 child = 1;
    uint64 generation = 2;
    InodeAttributes attributes = 3;
    int64 attributesExpiration = 4;
    int64 entryExpiration = 5;
}

message InodeAttributes {
    uint64 size = 1;
    uint32 nlink = 2;
    uint32 mode = 3;
    int64 atime = 4;
    int64 mtime = 5;
    int64 ctime = 6;
    int64 crtime = 7;
    uint32 uid = 8;
    uint32 gid = 9;
}

message Dirent {
    // The (opaque) offset within the directory file of the entry following this
    // one. See notes on fuseops.ReadDirOp.Offset for details.
    uint64 offset = 1;

    // The inode of the child file or directory, and its name within the parent.
    uint64 inode = 2;
    string name = 3;

    // The type of the child. The zero value (DT_Unknown) is legal, but means
    // that the kernel will need to call GetAttr when the type is needed.
    uint32 type = 4;
}

message Error {
    int64 status = 1;
    string msg = 2;
}

message UInt64ID {
    uint64 id = 1;
}

message OwnerId {
    uint64 id = 1;
}

message Addr {
    string addr = 1;
}

message IsOK {
    bool ok = 1;
}
