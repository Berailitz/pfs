// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remotetree.proto

package remotetree

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Chunk struct {
	Start                int64    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{0}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateRequest struct {
	Parent               uint64   `protobuf:"varint,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Dt                   uint32   `protobuf:"varint,3,opt,name=dt,proto3" json:"dt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{1}
}

func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetDt() uint32 {
	if m != nil {
		return m.Dt
	}
	return 0
}

type CreateReply struct {
	Err                  *Error   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Child                uint64   `protobuf:"varint,2,opt,name=child,proto3" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateReply) Reset()         { *m = CreateReply{} }
func (m *CreateReply) String() string { return proto.CompactTextString(m) }
func (*CreateReply) ProtoMessage()    {}
func (*CreateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{2}
}

func (m *CreateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateReply.Unmarshal(m, b)
}
func (m *CreateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateReply.Marshal(b, m, deterministic)
}
func (m *CreateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReply.Merge(m, src)
}
func (m *CreateReply) XXX_Size() int {
	return xxx_messageInfo_CreateReply.Size(m)
}
func (m *CreateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReply proto.InternalMessageInfo

func (m *CreateReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *CreateReply) GetChild() uint64 {
	if m != nil {
		return m.Child
	}
	return 0
}

type DeleteRequest struct {
	Parent               uint64   `protobuf:"varint,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{3}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *DeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteReply struct {
	Err                  *Error   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteReply) Reset()         { *m = DeleteReply{} }
func (m *DeleteReply) String() string { return proto.CompactTextString(m) }
func (*DeleteReply) ProtoMessage()    {}
func (*DeleteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{4}
}

func (m *DeleteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteReply.Unmarshal(m, b)
}
func (m *DeleteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteReply.Marshal(b, m, deterministic)
}
func (m *DeleteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReply.Merge(m, src)
}
func (m *DeleteReply) XXX_Size() int {
	return xxx_messageInfo_DeleteReply.Size(m)
}
func (m *DeleteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReply proto.InternalMessageInfo

func (m *DeleteReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type WriteFileRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Chunk                *Chunk   `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteFileRequest) Reset()         { *m = WriteFileRequest{} }
func (m *WriteFileRequest) String() string { return proto.CompactTextString(m) }
func (*WriteFileRequest) ProtoMessage()    {}
func (*WriteFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{5}
}

func (m *WriteFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteFileRequest.Unmarshal(m, b)
}
func (m *WriteFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteFileRequest.Marshal(b, m, deterministic)
}
func (m *WriteFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteFileRequest.Merge(m, src)
}
func (m *WriteFileRequest) XXX_Size() int {
	return xxx_messageInfo_WriteFileRequest.Size(m)
}
func (m *WriteFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteFileRequest proto.InternalMessageInfo

func (m *WriteFileRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WriteFileRequest) GetChunk() *Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type WriteFileReply struct {
	Err                  *Error   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Size                 int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteFileReply) Reset()         { *m = WriteFileReply{} }
func (m *WriteFileReply) String() string { return proto.CompactTextString(m) }
func (*WriteFileReply) ProtoMessage()    {}
func (*WriteFileReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{6}
}

func (m *WriteFileReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteFileReply.Unmarshal(m, b)
}
func (m *WriteFileReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteFileReply.Marshal(b, m, deterministic)
}
func (m *WriteFileReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteFileReply.Merge(m, src)
}
func (m *WriteFileReply) XXX_Size() int {
	return xxx_messageInfo_WriteFileReply.Size(m)
}
func (m *WriteFileReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteFileReply.DiscardUnknown(m)
}

var xxx_messageInfo_WriteFileReply proto.InternalMessageInfo

func (m *WriteFileReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *WriteFileReply) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type WriteAttrRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Attr                 []byte   `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteAttrRequest) Reset()         { *m = WriteAttrRequest{} }
func (m *WriteAttrRequest) String() string { return proto.CompactTextString(m) }
func (*WriteAttrRequest) ProtoMessage()    {}
func (*WriteAttrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{7}
}

func (m *WriteAttrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteAttrRequest.Unmarshal(m, b)
}
func (m *WriteAttrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteAttrRequest.Marshal(b, m, deterministic)
}
func (m *WriteAttrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteAttrRequest.Merge(m, src)
}
func (m *WriteAttrRequest) XXX_Size() int {
	return xxx_messageInfo_WriteAttrRequest.Size(m)
}
func (m *WriteAttrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteAttrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteAttrRequest proto.InternalMessageInfo

func (m *WriteAttrRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WriteAttrRequest) GetAttr() []byte {
	if m != nil {
		return m.Attr
	}
	return nil
}

type WriteAttrReply struct {
	Err                  *Error   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteAttrReply) Reset()         { *m = WriteAttrReply{} }
func (m *WriteAttrReply) String() string { return proto.CompactTextString(m) }
func (*WriteAttrReply) ProtoMessage()    {}
func (*WriteAttrReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{8}
}

func (m *WriteAttrReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteAttrReply.Unmarshal(m, b)
}
func (m *WriteAttrReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteAttrReply.Marshal(b, m, deterministic)
}
func (m *WriteAttrReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteAttrReply.Merge(m, src)
}
func (m *WriteAttrReply) XXX_Size() int {
	return xxx_messageInfo_WriteAttrReply.Size(m)
}
func (m *WriteAttrReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteAttrReply.DiscardUnknown(m)
}

var xxx_messageInfo_WriteAttrReply proto.InternalMessageInfo

func (m *WriteAttrReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type ReadFileReply struct {
	Rrr                  *Error   `protobuf:"bytes,1,opt,name=rrr,proto3" json:"rrr,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadFileReply) Reset()         { *m = ReadFileReply{} }
func (m *ReadFileReply) String() string { return proto.CompactTextString(m) }
func (*ReadFileReply) ProtoMessage()    {}
func (*ReadFileReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{9}
}

func (m *ReadFileReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadFileReply.Unmarshal(m, b)
}
func (m *ReadFileReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadFileReply.Marshal(b, m, deterministic)
}
func (m *ReadFileReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadFileReply.Merge(m, src)
}
func (m *ReadFileReply) XXX_Size() int {
	return xxx_messageInfo_ReadFileReply.Size(m)
}
func (m *ReadFileReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadFileReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReadFileReply proto.InternalMessageInfo

func (m *ReadFileReply) GetRrr() *Error {
	if m != nil {
		return m.Rrr
	}
	return nil
}

func (m *ReadFileReply) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type ReadDirReply struct {
	Err                  *Error    `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Dirents              []*Dirent `protobuf:"bytes,2,rep,name=dirents,proto3" json:"dirents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReadDirReply) Reset()         { *m = ReadDirReply{} }
func (m *ReadDirReply) String() string { return proto.CompactTextString(m) }
func (*ReadDirReply) ProtoMessage()    {}
func (*ReadDirReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{10}
}

func (m *ReadDirReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadDirReply.Unmarshal(m, b)
}
func (m *ReadDirReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadDirReply.Marshal(b, m, deterministic)
}
func (m *ReadDirReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadDirReply.Merge(m, src)
}
func (m *ReadDirReply) XXX_Size() int {
	return xxx_messageInfo_ReadDirReply.Size(m)
}
func (m *ReadDirReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadDirReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReadDirReply proto.InternalMessageInfo

func (m *ReadDirReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ReadDirReply) GetDirents() []*Dirent {
	if m != nil {
		return m.Dirents
	}
	return nil
}

type ReadAttrReply struct {
	Err                  *Error   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Attr                 []byte   `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadAttrReply) Reset()         { *m = ReadAttrReply{} }
func (m *ReadAttrReply) String() string { return proto.CompactTextString(m) }
func (*ReadAttrReply) ProtoMessage()    {}
func (*ReadAttrReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{11}
}

func (m *ReadAttrReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadAttrReply.Unmarshal(m, b)
}
func (m *ReadAttrReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadAttrReply.Marshal(b, m, deterministic)
}
func (m *ReadAttrReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadAttrReply.Merge(m, src)
}
func (m *ReadAttrReply) XXX_Size() int {
	return xxx_messageInfo_ReadAttrReply.Size(m)
}
func (m *ReadAttrReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadAttrReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReadAttrReply proto.InternalMessageInfo

func (m *ReadAttrReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ReadAttrReply) GetAttr() []byte {
	if m != nil {
		return m.Attr
	}
	return nil
}

type Dirent struct {
	// The (opaque) offset within the directory file of the entry following this
	// one. See notes on fuseops.ReadDirOp.Offset for details.
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// The inode of the child file or directory, and its name within the parent.
	Inode uint64 `protobuf:"varint,2,opt,name=inode,proto3" json:"inode,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The type of the child. The zero value (DT_Unknown) is legal, but means
	// that the kernel will need to call GetAttr when the type is needed.
	Type                 uint32   `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dirent) Reset()         { *m = Dirent{} }
func (m *Dirent) String() string { return proto.CompactTextString(m) }
func (*Dirent) ProtoMessage()    {}
func (*Dirent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{12}
}

func (m *Dirent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dirent.Unmarshal(m, b)
}
func (m *Dirent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dirent.Marshal(b, m, deterministic)
}
func (m *Dirent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dirent.Merge(m, src)
}
func (m *Dirent) XXX_Size() int {
	return xxx_messageInfo_Dirent.Size(m)
}
func (m *Dirent) XXX_DiscardUnknown() {
	xxx_messageInfo_Dirent.DiscardUnknown(m)
}

var xxx_messageInfo_Dirent proto.InternalMessageInfo

func (m *Dirent) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Dirent) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *Dirent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dirent) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type Error struct {
	Status               int64    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{13}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type NodeId struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeId) Reset()         { *m = NodeId{} }
func (m *NodeId) String() string { return proto.CompactTextString(m) }
func (*NodeId) ProtoMessage()    {}
func (*NodeId) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{14}
}

func (m *NodeId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeId.Unmarshal(m, b)
}
func (m *NodeId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeId.Marshal(b, m, deterministic)
}
func (m *NodeId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeId.Merge(m, src)
}
func (m *NodeId) XXX_Size() int {
	return xxx_messageInfo_NodeId.Size(m)
}
func (m *NodeId) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeId.DiscardUnknown(m)
}

var xxx_messageInfo_NodeId proto.InternalMessageInfo

func (m *NodeId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type OwnerId struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OwnerId) Reset()         { *m = OwnerId{} }
func (m *OwnerId) String() string { return proto.CompactTextString(m) }
func (*OwnerId) ProtoMessage()    {}
func (*OwnerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{15}
}

func (m *OwnerId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OwnerId.Unmarshal(m, b)
}
func (m *OwnerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OwnerId.Marshal(b, m, deterministic)
}
func (m *OwnerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnerId.Merge(m, src)
}
func (m *OwnerId) XXX_Size() int {
	return xxx_messageInfo_OwnerId.Size(m)
}
func (m *OwnerId) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnerId.DiscardUnknown(m)
}

var xxx_messageInfo_OwnerId proto.InternalMessageInfo

func (m *OwnerId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Addr struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Addr) Reset()         { *m = Addr{} }
func (m *Addr) String() string { return proto.CompactTextString(m) }
func (*Addr) ProtoMessage()    {}
func (*Addr) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{16}
}

func (m *Addr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Addr.Unmarshal(m, b)
}
func (m *Addr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Addr.Marshal(b, m, deterministic)
}
func (m *Addr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Addr.Merge(m, src)
}
func (m *Addr) XXX_Size() int {
	return xxx_messageInfo_Addr.Size(m)
}
func (m *Addr) XXX_DiscardUnknown() {
	xxx_messageInfo_Addr.DiscardUnknown(m)
}

var xxx_messageInfo_Addr proto.InternalMessageInfo

func (m *Addr) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type IsOK struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsOK) Reset()         { *m = IsOK{} }
func (m *IsOK) String() string { return proto.CompactTextString(m) }
func (*IsOK) ProtoMessage()    {}
func (*IsOK) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8de7cc35295e1fb, []int{17}
}

func (m *IsOK) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsOK.Unmarshal(m, b)
}
func (m *IsOK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsOK.Marshal(b, m, deterministic)
}
func (m *IsOK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsOK.Merge(m, src)
}
func (m *IsOK) XXX_Size() int {
	return xxx_messageInfo_IsOK.Size(m)
}
func (m *IsOK) XXX_DiscardUnknown() {
	xxx_messageInfo_IsOK.DiscardUnknown(m)
}

var xxx_messageInfo_IsOK proto.InternalMessageInfo

func (m *IsOK) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Chunk)(nil), "remotetree.Chunk")
	proto.RegisterType((*CreateRequest)(nil), "remotetree.CreateRequest")
	proto.RegisterType((*CreateReply)(nil), "remotetree.CreateReply")
	proto.RegisterType((*DeleteRequest)(nil), "remotetree.DeleteRequest")
	proto.RegisterType((*DeleteReply)(nil), "remotetree.DeleteReply")
	proto.RegisterType((*WriteFileRequest)(nil), "remotetree.WriteFileRequest")
	proto.RegisterType((*WriteFileReply)(nil), "remotetree.WriteFileReply")
	proto.RegisterType((*WriteAttrRequest)(nil), "remotetree.WriteAttrRequest")
	proto.RegisterType((*WriteAttrReply)(nil), "remotetree.WriteAttrReply")
	proto.RegisterType((*ReadFileReply)(nil), "remotetree.ReadFileReply")
	proto.RegisterType((*ReadDirReply)(nil), "remotetree.ReadDirReply")
	proto.RegisterType((*ReadAttrReply)(nil), "remotetree.ReadAttrReply")
	proto.RegisterType((*Dirent)(nil), "remotetree.Dirent")
	proto.RegisterType((*Error)(nil), "remotetree.Error")
	proto.RegisterType((*NodeId)(nil), "remotetree.NodeId")
	proto.RegisterType((*OwnerId)(nil), "remotetree.OwnerId")
	proto.RegisterType((*Addr)(nil), "remotetree.Addr")
	proto.RegisterType((*IsOK)(nil), "remotetree.IsOK")
}

func init() {
	proto.RegisterFile("remotetree.proto", fileDescriptor_f8de7cc35295e1fb)
}

var fileDescriptor_f8de7cc35295e1fb = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x4d, 0x93, 0xac, 0xdd, 0x6e, 0xd7, 0xa9, 0x18, 0x34, 0xb2, 0x88, 0x87, 0xca, 0x3c, 0xd0,
	0x07, 0x34, 0x89, 0xc2, 0x06, 0x68, 0x12, 0xd2, 0xb4, 0x02, 0x9b, 0x26, 0x6d, 0xc2, 0x42, 0xe2,
	0x0d, 0x29, 0xcc, 0x77, 0x5b, 0xd4, 0x2c, 0x2e, 0x8e, 0x0b, 0x2a, 0x7f, 0xc3, 0x9f, 0x22, 0xdb,
	0x49, 0x71, 0x4a, 0x06, 0x1d, 0x6f, 0xf7, 0xe6, 0xfa, 0x1c, 0x1f, 0xdb, 0xe7, 0xb4, 0xd0, 0x97,
	0x78, 0x23, 0x14, 0x2a, 0x89, 0xb8, 0x3b, 0x95, 0x42, 0x09, 0x02, 0xbf, 0xbf, 0xd0, 0x67, 0xb0,
	0x76, 0x74, 0x3d, 0xcb, 0x27, 0xe4, 0x01, 0xac, 0x15, 0x2a, 0x91, 0x2a, 0x6a, 0x0d, 0x5a, 0xc3,
	0x80, 0xd9, 0x86, 0x10, 0x08, 0x79, 0xa2, 0x92, 0xc8, 0x1f, 0xb4, 0x86, 0x9b, 0xcc, 0xd4, 0xf4,
	0x14, 0x7a, 0x47, 0x12, 0x13, 0x85, 0x0c, 0xbf, 0xce, 0xb0, 0x50, 0x64, 0x1b, 0xda, 0xd3, 0x44,
	0x62, 0x6e, 0xb1, 0x21, 0x2b, 0x3b, 0x0d, 0xce, 0x93, 0x1b, 0x34, 0xe0, 0x0d, 0x66, 0x6a, 0xb2,
	0x05, 0x3e, 0x57, 0x51, 0x30, 0x68, 0x0d, 0x7b, 0xcc, 0xe7, 0x8a, 0x1e, 0x43, 0xb7, 0x22, 0x9b,
	0x66, 0x73, 0xf2, 0x18, 0x02, 0x94, 0xd2, 0xf0, 0x74, 0x47, 0xf7, 0x76, 0x1d, 0xe9, 0x6f, 0xa5,
	0x14, 0x92, 0xe9, 0xa9, 0x96, 0x7a, 0x71, 0x9d, 0x66, 0xdc, 0x10, 0x87, 0xcc, 0x36, 0xf4, 0x00,
	0x7a, 0x63, 0xcc, 0xf0, 0xbf, 0x64, 0xd1, 0x11, 0x74, 0x2b, 0xf0, 0xaa, 0x32, 0xe8, 0x29, 0xf4,
	0x3f, 0xc9, 0x54, 0xe1, 0xbb, 0x34, 0x5b, 0xec, 0xb9, 0x05, 0x7e, 0xca, 0xcb, 0xfd, 0xfc, 0x94,
	0x93, 0x27, 0x5a, 0xea, 0x2c, 0x9f, 0x98, 0xcd, 0x96, 0xa8, 0xcc, 0xbd, 0x33, 0x3b, 0xa7, 0x27,
	0xb0, 0xe5, 0x90, 0xad, 0x7c, 0x15, 0x04, 0xc2, 0x22, 0xfd, 0x61, 0xcf, 0x12, 0x30, 0x53, 0xd3,
	0xfd, 0x52, 0xd7, 0xa1, 0x52, 0xf2, 0x36, 0x5d, 0x04, 0xc2, 0x44, 0x29, 0x59, 0xbd, 0xab, 0xae,
	0xe9, 0x5e, 0x29, 0xc1, 0xe2, 0x56, 0xbe, 0x86, 0x33, 0xe8, 0x31, 0x4c, 0x78, 0x4d, 0xb8, 0xfc,
	0x2b, 0x4a, 0x4a, 0x49, 0x22, 0xe8, 0x5c, 0x88, 0x5c, 0xe9, 0xd7, 0xb1, 0x1a, 0xaa, 0x96, 0x26,
	0xb0, 0xa9, 0xf9, 0xc6, 0xe9, 0x1d, 0x44, 0x90, 0xa7, 0xd0, 0xe1, 0xa9, 0x7e, 0xdd, 0x22, 0xf2,
	0x07, 0xc1, 0xb0, 0x3b, 0x22, 0xee, 0xc2, 0xb1, 0x19, 0xb1, 0x6a, 0x09, 0x3d, 0xb6, 0x92, 0xef,
	0x76, 0xd0, 0xc6, 0x3b, 0xfb, 0x0c, 0x6d, 0x4b, 0xae, 0xdd, 0x26, 0x2e, 0x2f, 0x0b, 0x5c, 0xb8,
	0xcd, 0x76, 0xda, 0xac, 0x69, 0x2e, 0x38, 0x56, 0x66, 0x35, 0xcd, 0xc2, 0x83, 0x81, 0x13, 0x0d,
	0x02, 0xa1, 0x9a, 0x4f, 0x31, 0x0a, 0x4d, 0x38, 0x4c, 0xad, 0xe3, 0x69, 0x14, 0x68, 0xfa, 0x42,
	0x25, 0x6a, 0x56, 0x94, 0xf9, 0x2c, 0x3b, 0xd2, 0x87, 0xe0, 0xa6, 0xb8, 0x2a, 0xbd, 0xac, 0x4b,
	0x1a, 0x41, 0xfb, 0x4c, 0x70, 0x3c, 0xe1, 0xcb, 0x8f, 0x4e, 0x77, 0xa0, 0x73, 0xfe, 0x3d, 0x47,
	0xd9, 0x30, 0x8a, 0x21, 0x3c, 0xe4, 0xdc, 0x9e, 0x91, 0x73, 0x7b, 0x13, 0x1b, 0xcc, 0xd4, 0x74,
	0x1b, 0xc2, 0x93, 0xe2, 0xfc, 0x54, 0x63, 0xc4, 0xc4, 0x4c, 0xd6, 0x99, 0x2f, 0x26, 0xa3, 0x9f,
	0x6d, 0x00, 0x66, 0x6e, 0xea, 0xa3, 0x44, 0x24, 0x6f, 0xa0, 0x6d, 0x93, 0x4c, 0x76, 0x6a, 0x2e,
	0x77, 0x7f, 0x2a, 0xe2, 0x87, 0x4d, 0xa3, 0x69, 0x36, 0xa7, 0x9e, 0xc6, 0xdb, 0x08, 0xd6, 0xf1,
	0xb5, 0x4c, 0xd7, 0xf1, 0x4e, 0x62, 0xa9, 0x47, 0xde, 0xc3, 0xc6, 0x22, 0x41, 0xe4, 0x91, 0xbb,
	0x6e, 0x39, 0xa5, 0x71, 0x7c, 0xcb, 0xb4, 0x4e, 0xa4, 0xed, 0xd1, 0x40, 0xe4, 0xc4, 0xaa, 0x81,
	0x68, 0xe1, 0x29, 0xea, 0x91, 0xd7, 0xd0, 0x29, 0x9d, 0x4c, 0x6a, 0x76, 0xb4, 0xcf, 0x13, 0x47,
	0xee, 0x37, 0xd7, 0xf2, 0xd4, 0x23, 0x07, 0xb0, 0x5e, 0x85, 0xaa, 0x11, 0xbb, 0xb3, 0x8c, 0x75,
	0x0f, 0x50, 0x82, 0x8d, 0xfe, 0x95, 0xc0, 0xae, 0xe8, 0x17, 0x00, 0x1f, 0x66, 0x28, 0xe7, 0xc6,
	0x29, 0x8d, 0xf0, 0xbe, 0xfb, 0x4d, 0xbb, 0x86, 0x7a, 0x64, 0x0f, 0xd6, 0x0f, 0xb3, 0x4c, 0x5c,
	0xe8, 0xe7, 0xbf, 0xef, 0xce, 0x4b, 0xc3, 0xc5, 0x0d, 0x44, 0x76, 0xb3, 0x31, 0x26, 0x15, 0xf0,
	0x9f, 0x9b, 0x69, 0x1b, 0x52, 0x8f, 0xbc, 0xd2, 0xf1, 0xbd, 0x4a, 0x0b, 0x85, 0xd2, 0xaa, 0xfc,
	0x43, 0x51, 0xdc, 0xa4, 0x81, 0x7a, 0x64, 0x1f, 0xba, 0xda, 0xb1, 0xdf, 0xd0, 0xe2, 0x1a, 0x95,
	0x36, 0xed, 0xf8, 0x12, 0x36, 0xab, 0xe3, 0x31, 0x21, 0xd4, 0xca, 0xc0, 0x2f, 0x6d, 0xf3, 0x8f,
	0xfb, 0xfc, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xb8, 0x55, 0xfe, 0x85, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RemoteTreeClient is the client API for RemoteTree service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteTreeClient interface {
	//rpc RLock(NodeId) returns (StatusReply) {}
	//rpc WLock(NodeId) returns (StatusReply) {}
	//rpc RUnlock(NodeId) returns (StatusReply) {}
	//rpc WUnlock(NodeId) returns (StatusReply) {}
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileReply, error)
	WriteAttr(ctx context.Context, in *WriteAttrRequest, opts ...grpc.CallOption) (*WriteAttrReply, error)
	ReadDir(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*ReadDirReply, error)
	ReadFile(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*ReadFileReply, error)
	ReadAttr(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*ReadAttrReply, error)
	QueryOwner(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*Addr, error)
	Allocate(ctx context.Context, in *OwnerId, opts ...grpc.CallOption) (*NodeId, error)
	Deallocate(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*IsOK, error)
	RegisterOwner(ctx context.Context, in *Addr, opts ...grpc.CallOption) (*OwnerId, error)
	RemoveOwner(ctx context.Context, in *OwnerId, opts ...grpc.CallOption) (*IsOK, error)
	AllocateRoot(ctx context.Context, in *OwnerId, opts ...grpc.CallOption) (*IsOK, error)
}

type remoteTreeClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteTreeClient(cc grpc.ClientConnInterface) RemoteTreeClient {
	return &remoteTreeClient{cc}
}

func (c *remoteTreeClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileReply, error) {
	out := new(WriteFileReply)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) WriteAttr(ctx context.Context, in *WriteAttrRequest, opts ...grpc.CallOption) (*WriteAttrReply, error) {
	out := new(WriteAttrReply)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/WriteAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) ReadDir(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*ReadDirReply, error) {
	out := new(ReadDirReply)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/ReadDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) ReadFile(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*ReadFileReply, error) {
	out := new(ReadFileReply)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/ReadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) ReadAttr(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*ReadAttrReply, error) {
	out := new(ReadAttrReply)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/ReadAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) QueryOwner(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*Addr, error) {
	out := new(Addr)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/QueryOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) Allocate(ctx context.Context, in *OwnerId, opts ...grpc.CallOption) (*NodeId, error) {
	out := new(NodeId)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/Allocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) Deallocate(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*IsOK, error) {
	out := new(IsOK)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/Deallocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) RegisterOwner(ctx context.Context, in *Addr, opts ...grpc.CallOption) (*OwnerId, error) {
	out := new(OwnerId)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/RegisterOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) RemoveOwner(ctx context.Context, in *OwnerId, opts ...grpc.CallOption) (*IsOK, error) {
	out := new(IsOK)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/RemoveOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTreeClient) AllocateRoot(ctx context.Context, in *OwnerId, opts ...grpc.CallOption) (*IsOK, error) {
	out := new(IsOK)
	err := c.cc.Invoke(ctx, "/remotetree.RemoteTree/AllocateRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteTreeServer is the server API for RemoteTree service.
type RemoteTreeServer interface {
	//rpc RLock(NodeId) returns (StatusReply) {}
	//rpc WLock(NodeId) returns (StatusReply) {}
	//rpc RUnlock(NodeId) returns (StatusReply) {}
	//rpc WUnlock(NodeId) returns (StatusReply) {}
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	WriteFile(context.Context, *WriteFileRequest) (*WriteFileReply, error)
	WriteAttr(context.Context, *WriteAttrRequest) (*WriteAttrReply, error)
	ReadDir(context.Context, *NodeId) (*ReadDirReply, error)
	ReadFile(context.Context, *NodeId) (*ReadFileReply, error)
	ReadAttr(context.Context, *NodeId) (*ReadAttrReply, error)
	QueryOwner(context.Context, *NodeId) (*Addr, error)
	Allocate(context.Context, *OwnerId) (*NodeId, error)
	Deallocate(context.Context, *NodeId) (*IsOK, error)
	RegisterOwner(context.Context, *Addr) (*OwnerId, error)
	RemoveOwner(context.Context, *OwnerId) (*IsOK, error)
	AllocateRoot(context.Context, *OwnerId) (*IsOK, error)
}

// UnimplementedRemoteTreeServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteTreeServer struct {
}

func (*UnimplementedRemoteTreeServer) Create(ctx context.Context, req *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRemoteTreeServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedRemoteTreeServer) WriteFile(ctx context.Context, req *WriteFileRequest) (*WriteFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (*UnimplementedRemoteTreeServer) WriteAttr(ctx context.Context, req *WriteAttrRequest) (*WriteAttrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteAttr not implemented")
}
func (*UnimplementedRemoteTreeServer) ReadDir(ctx context.Context, req *NodeId) (*ReadDirReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDir not implemented")
}
func (*UnimplementedRemoteTreeServer) ReadFile(ctx context.Context, req *NodeId) (*ReadFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (*UnimplementedRemoteTreeServer) ReadAttr(ctx context.Context, req *NodeId) (*ReadAttrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAttr not implemented")
}
func (*UnimplementedRemoteTreeServer) QueryOwner(ctx context.Context, req *NodeId) (*Addr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwner not implemented")
}
func (*UnimplementedRemoteTreeServer) Allocate(ctx context.Context, req *OwnerId) (*NodeId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (*UnimplementedRemoteTreeServer) Deallocate(ctx context.Context, req *NodeId) (*IsOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deallocate not implemented")
}
func (*UnimplementedRemoteTreeServer) RegisterOwner(ctx context.Context, req *Addr) (*OwnerId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOwner not implemented")
}
func (*UnimplementedRemoteTreeServer) RemoveOwner(ctx context.Context, req *OwnerId) (*IsOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOwner not implemented")
}
func (*UnimplementedRemoteTreeServer) AllocateRoot(ctx context.Context, req *OwnerId) (*IsOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateRoot not implemented")
}

func RegisterRemoteTreeServer(s *grpc.Server, srv RemoteTreeServer) {
	s.RegisterService(&_RemoteTree_serviceDesc, srv)
}

func _RemoteTree_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).WriteFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_WriteAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).WriteAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/WriteAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).WriteAttr(ctx, req.(*WriteAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_ReadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).ReadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/ReadDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).ReadDir(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).ReadFile(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_ReadAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).ReadAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/ReadAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).ReadAttr(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_QueryOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).QueryOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/QueryOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).QueryOwner(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/Allocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).Allocate(ctx, req.(*OwnerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_Deallocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).Deallocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/Deallocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).Deallocate(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_RegisterOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).RegisterOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/RegisterOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).RegisterOwner(ctx, req.(*Addr))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_RemoveOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).RemoveOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/RemoveOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).RemoveOwner(ctx, req.(*OwnerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTree_AllocateRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTreeServer).AllocateRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotetree.RemoteTree/AllocateRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTreeServer).AllocateRoot(ctx, req.(*OwnerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteTree_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remotetree.RemoteTree",
	HandlerType: (*RemoteTreeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RemoteTree_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RemoteTree_Delete_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _RemoteTree_WriteFile_Handler,
		},
		{
			MethodName: "WriteAttr",
			Handler:    _RemoteTree_WriteAttr_Handler,
		},
		{
			MethodName: "ReadDir",
			Handler:    _RemoteTree_ReadDir_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _RemoteTree_ReadFile_Handler,
		},
		{
			MethodName: "ReadAttr",
			Handler:    _RemoteTree_ReadAttr_Handler,
		},
		{
			MethodName: "QueryOwner",
			Handler:    _RemoteTree_QueryOwner_Handler,
		},
		{
			MethodName: "Allocate",
			Handler:    _RemoteTree_Allocate_Handler,
		},
		{
			MethodName: "Deallocate",
			Handler:    _RemoteTree_Deallocate_Handler,
		},
		{
			MethodName: "RegisterOwner",
			Handler:    _RemoteTree_RegisterOwner_Handler,
		},
		{
			MethodName: "RemoveOwner",
			Handler:    _RemoteTree_RemoveOwner_Handler,
		},
		{
			MethodName: "AllocateRoot",
			Handler:    _RemoteTree_AllocateRoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remotetree.proto",
}
