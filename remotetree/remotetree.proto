syntax = "proto3";

package remotetree;

service RemoteTree {
    //rpc RLock(NodeId) returns (StatusReply) {}
    //rpc WLock(NodeId) returns (StatusReply) {}
    //rpc RUnlock(NodeId) returns (StatusReply) {}
    //rpc WUnlock(NodeId) returns (StatusReply) {}
    rpc Create(CreateRequest) returns (CreateReply) {}
    rpc Delete(DeleteRequest) returns (DeleteReply) {}
    rpc WriteFile(WriteFileRequest) returns (WriteFileReply) {}
    rpc WriteAttr(WriteAttrRequest) returns (WriteAttrReply) {}
    rpc ReadDir(NodeId) returns (ReadDirReply) {}
    rpc ReadFile(NodeId) returns (ReadFileReply) {}
    rpc ReadAttr(NodeId) returns (ReadAttrReply) {}

    rpc QueryOwner(NodeId) returns (Addr) {}
    rpc Allocate(OwnerId) returns (NodeId) {}
    rpc Deallocate(NodeId) returns (IsOK) {}
    rpc RegisterOwner(Addr) returns (OwnerId) {}
    rpc RemoveOwner(OwnerId) returns (IsOK) {}
}

message Chunk {
    int64 start = 1;
    bytes data = 2;
}

message CreateRequest {
    uint64 parent = 1;
    string name = 2;
    uint32 dt = 3;
}

message CreateReply {
    Error err = 1;
    uint64 child = 2;
}

message DeleteRequest {
    uint64 parent = 1;
    string name = 2;
}

message DeleteReply {
    Error err = 1;
}

message WriteFileRequest {
    uint64 id = 1;
    Chunk chunk = 2;
}

message WriteFileReply {
    Error err = 1;
    int64 size = 2;
}

message WriteAttrRequest {
    uint64 id = 1;
    bytes attr = 2;
}

message WriteAttrReply {
    Error err = 1;
}

message ReadFileReply {
    Error rrr = 1;
    bytes content = 2;
}

message ReadDirReply {
    Error err = 1;
    repeated Dirent dirents = 2;
}

message ReadAttrReply {
    Error err = 1;
    bytes attr = 2;
}

message Dirent {
    // The (opaque) offset within the directory file of the entry following this
    // one. See notes on fuseops.ReadDirOp.Offset for details.
    uint64 offset = 1;

    // The inode of the child file or directory, and its name within the parent.
    uint64 inode = 2;
    string name = 3;

    // The type of the child. The zero value (DT_Unknown) is legal, but means
    // that the kernel will need to call GetAttr when the type is needed.
    uint32 type = 4;
}

message Error {
    int64 status = 1;
    string msg = 2;
}

message NodeId {
    uint64 id = 1;
}

message OwnerId {
    uint64 id = 1;
}

message Addr {
    string addr = 1;
}

message IsOK {
    bool ok = 1;
}
